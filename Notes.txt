episode 3
const express = require("express");

const app = express(); //instance of express js application

//the below function is known as the request handler for "/"
app.use("/",(req,res)=>{
    res.send("hello from the dashboard")
})

//the below function is known as the request handler for "/test"
app.use("/test",(req,res)=>{
    console.log("test")
    res.send("test from the server")
})

//the below function is known as the request handler for "/hello"
app.use("/hello",(req,res)=>{
    res.send("hello hello")
})

app.listen(7777, () => {
  console.log("Server is running on port 7777");
});

-------------------------------------------------------------------------

episode 4
Writing order of routes matter alot

Open POSTMAN
Create a Workspace
Create a Collection(Collection is like a collection of api's)

42min - app.use() matches all the HTTP methods API calls. With app.use it handles all types of http methods
app.get("/user",(req,res)=>{
    
})  this will only handle GET call to /user

CODE:
    const express = require("express");

    const app = express(); //instance of express js application

    //the below function is known as the request handler for "/user"
    app.get("/user", (req, res) => {
    res.send({
        firstName: "John",
        lastName: "Doe",
    });
    });

    app.post("/user", (req, res) => {
    res.send("User created");
    });

    app.delete("/user", (req, res) => {
    res.send("User deleted");
    });

    app.listen(7777, () => {
    console.log("Server is running on port 7777");
    });

51min
Advanced routing
/ab+c, /ab?c,/ab*cd

-----------------------------------------------------------------

Episode 5

One route can have multiple route handlers like shown below

    app.use(
    "/user",
    (req, res) => {
        //route handler 1
        res.send("response 1");
    },
    (req, res) => {
        //route handler 2
        res.send("response 2");
    }
    );

    Use next() when you want to call the second route handler
    app.use(
    "/user",
    (req, res, next) => {
        //route handler 1

        next();
        res.send("response 1");
    },
    (req, res) => {
        //route handler 2

        res.send("response 2");
    }
    );

42 min - Middlewares
Whenever you make an api call, it basically goes through a middleware chain and finally goes to the request handler which send us the response

Difference between app.use() and app.all()

Order of arguments: 1st is the error,2nd is the request,3rd is the response,4th is the next
app.use("/admin",(err,req,res,next)=>{
    if(err){
        res.status(500).send("Something went wrong")
    }
})

---------------------------------------

Season 2 episode 6
To connect to the Database we will be using Mongoose

In the cluster there can be multiple Databases
Collection(Table)

Once you have established a successfull connection to your Database then you should listen to the port

What is a Schema in a Database???
Schema is a blueprint of a collection, What all things are required to create a user

We will create schema using mongoose

In the models - We define what all fields the user collection will have

Once you have created a Schema , we create a mongoose model, by writing mongoose.model(name of the model,schema)

Whenever you are saving/getting a data on database, all the methods returns you a promise

Database then Collection then Document.There can be multiple documents inside a Collection

app.js

    const express = require("express");
    const { connectDB } = require("./config/database");
    const User = require("./models/user");

    const app = express(); //instance of express js application

    app.post("/signup",async (req, res) => {
    const user = new User({
        firstName: "Katrina",
        lastName: "kaif",
        emailId: "katrina@yopmail.com",
        password: "123456",
    }); //creating a new instance of User model

    try {
        await user.save();  // this will save dummy data in database
        res.send("User created");
    } catch (error) {
        res.status(400).send("Error creating user");
    }

    });

    connectDB()
    .then(() => {
    console.log("Connected to the database");

    //listen to the port after successfull connection to the database
    app.listen(7777, () => {
      console.log("Server is running on port 7777");
    });
  })
  .catch((err) => console.log("Failed to connect to the database"));


-------------------------------------------------

Season 2 episode 7
express json middleware - converts json object to javascript object

these all methods are available on the mongoose model, check documentation 
https://mongoosejs.com/docs/api/model.html
Model.find() - returns all the documents from the collection
Model.findOne() - returns the first document from the collection
Model.findById() - returns the document with the given id
