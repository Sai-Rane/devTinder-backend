episode 3
const express = require("express");

const app = express(); //instance of express js application

//the below function is known as the request handler for "/"
app.use("/",(req,res)=>{
    res.send("hello from the dashboard")
})

//the below function is known as the request handler for "/test"
app.use("/test",(req,res)=>{
    console.log("test")
    res.send("test from the server")
})

//the below function is known as the request handler for "/hello"
app.use("/hello",(req,res)=>{
    res.send("hello hello")
})

app.listen(7777, () => {
  console.log("Server is running on port 7777");
});

-------------------------------------------------------------------------

episode 4
Writing order of routes matter alot

Open POSTMAN
Create a Workspace
Create a Collection(Collection is like a collection of api's)

42min - app.use() matches all the HTTP methods API calls. With app.use it handles all types of http methods
app.get("/user",(req,res)=>{
    
})  this will only handle GET call to /user

CODE:
    const express = require("express");

    const app = express(); //instance of express js application

    //the below function is known as the request handler for "/user"
    app.get("/user", (req, res) => {
    res.send({
        firstName: "John",
        lastName: "Doe",
    });
    });

    app.post("/user", (req, res) => {
    res.send("User created");
    });

    app.delete("/user", (req, res) => {
    res.send("User deleted");
    });

    app.listen(7777, () => {
    console.log("Server is running on port 7777");
    });

51min
Advanced routing
/ab+c, /ab?c,/ab*cd

-----------------------------------------------------------------

Episode 5

One route can have multiple route handlers like shown below

    app.use(
    "/user",
    (req, res) => {
        //route handler 1
        res.send("response 1");
    },
    (req, res) => {
        //route handler 2
        res.send("response 2");
    }
    );

    Use next() when you want to call the second route handler
    app.use(
    "/user",
    (req, res, next) => {
        //route handler 1

        next();
        res.send("response 1");
    },
    (req, res) => {
        //route handler 2

        res.send("response 2");
    }
    );

42 min - Middlewares
Whenever you make an api call, it basically goes through a middleware chain and finally goes to the request handler which send us the response

Difference between app.use() and app.all()

Order of arguments: 1st is the error,2nd is the request,3rd is the response,4th is the next
app.use("/admin",(err,req,res,next)=>{
    if(err){
        res.status(500).send("Something went wrong")
    }
})